export declare class converter {
    static getApplyFun(value: any): any;
    private static dataBuffer;
    private static dataView;
    static ULongToArray(value: number, target?: Uint8Array, offset?: number): Uint8Array | number[];
    static LongToArray(value: number, t?: Uint8Array | number[], offset?: number): Uint8Array | number[];
    static Float64ToArray(value: number, target?: Uint8Array | number[], offset?: number): Uint8Array | number[];
    static Float32ToArray(value: number, target?: Uint8Array | number[], offset?: number): Uint8Array | number[];
    static Int32ToArray(value: number, target?: Uint8Array | number[], offset?: number): Uint8Array | number[];
    static Int16ToArray(value: number, target?: Uint8Array | number[], offset?: number): Uint8Array | number[];
    static Uint32toArray(value: number, target?: Uint8Array | number[], offset?: number): Uint8Array | number[];
    static Uint16ToArray(value: number, target?: Uint8Array | number[], offset?: number): Uint8Array | number[];
    static StringToUtf8Array(str: string): Uint8Array;
    static ArrayToLong(buf: Uint8Array, offset?: number): number;
    static ArrayToULong(buf: Uint8Array, offset?: number): number;
    static ArrayToFloat64(buf: Uint8Array, offset?: number): number;
    static ArrayToFloat32(buf: Uint8Array, offset?: number): number;
    static ArrayToInt32(buf: Uint8Array, offset?: number): number;
    static ArrayToUint32(buf: Uint8Array, offset?: number): number;
    static ArrayToInt16(buf: Uint8Array, offset?: number): number;
    static ArrayToUint16(buf: Uint8Array, offset?: number): number;
    static ArrayToInt8(buf: Uint8Array, offset?: number): number;
    static ArrayToString(buf: Uint8Array, offset?: number): string;
}
export declare class binTool {
    private buffer;
    r_offset: number;
    w_offset: number;
    constructor(size?: number);
    private ckl;
    readSingle(): number;
    readLong(): number;
    readULong(): number;
    readDouble(): number;
    readInt8(): number;
    readUInt8(): number;
    readInt16(): number;
    readUInt16(): number;
    readInt32(): number;
    readUInt32(): number;
    readBoolean(): boolean;
    readByte(): number;
    readUnsignedShort(): number;
    readUnsignedInt(): number;
    readFloat(): number;
    readSymbolByte(): number;
    readShort(): number;
    readInt(): number;
    readBytes(length: number): Uint8Array;
    readStringUtf8(): string;
    readUTFBytes(): string;
    readUTFByLen(length: number): string;
    readStringUtf8FixLength(length: number): string;
    readStringAnsi(): string;
    getLength(): number;
    getBytesAvailable(): number;
    get length(): number;
    writeInt8(num: number): void;
    writeUInt8(num: number): void;
    writeInt16(num: number): void;
    writeUInt16(num: number): void;
    writeInt32(num: number): void;
    writeUInt32(num: number): void;
    writeSingle(num: number): void;
    writeLong(num: number): void;
    writeULong(num: number): void;
    writeDouble(num: number): void;
    writeStringAnsi(str: string): void;
    writeStringUtf8(str: string): void;
    writeStringUtf8DataOnly(str: string): void;
    writeByte(num: number): void;
    writeBytes(array: Uint8Array | number[] | number, offset?: number, length?: number): void;
    writeUint8Array(array: Uint8Array | number[] | number, offset?: number, length?: number): void;
    writeUnsignedShort(num: number): void;
    writeUnsignedInt(num: number): void;
    writeFloat(num: number): void;
    writeUTFBytes(str: string): void;
    writeSymbolByte(num: number): void;
    writeShort(num: number): void;
    writeInt(num: number): void;
    write(array: Uint8Array | number[] | number | any, offset?: number, length?: number): void;
    dispose(): void;
    getBuffer(): Uint8Array;
    getUint8Array(): Uint8Array;
}
