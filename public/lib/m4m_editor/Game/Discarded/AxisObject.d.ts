/// <reference types="./src/m4m" />
import { EditorType } from "../EditorApplication";
import { DebugTool } from "./SceneenvTool";
export declare class AxisObject {
    private app;
    scene: m4m.framework.scene;
    private inputMgr;
    private debugTool;
    private _tran;
    get tran(): m4m.framework.transform;
    set tran(trans: m4m.framework.transform);
    private _pyr;
    private _pyrX;
    private _pyrY;
    private _pyrZ;
    private _planeX;
    private _planeY;
    private _planeZ;
    private _box;
    private _boxX;
    private _boxY;
    private _boxZ;
    private _line;
    private _lineX;
    private _lineY;
    private _lineZ;
    private _circle;
    private _circleX;
    private _circleY;
    private _circleZ;
    private _colorX;
    private _colorY;
    private _colorZ;
    private _colorSelec;
    private anisSize;
    private selectMode;
    private isPlaneMode;
    private _isGlobalRotate;
    private readonly planeSize;
    private readonly planeAlpha;
    private _target;
    private xyzNames;
    private createXYZTrans;
    onSetTarget: (target: any) => void;
    get target(): m4m.framework.transform;
    set target(tar: m4m.framework.transform);
    private subTran;
    type: EditorType;
    private assemblMaterialMesh;
    constructor(type: EditorType, _app: m4m.framework.application, _debugTool: DebugTool);
    lock: boolean;
    update(delta: number): void;
    intersectionWith2Line(p1: m4m.math.vector3, d1: m4m.math.vector3, p2: m4m.math.vector3, d2: m4m.math.vector3, outpoint: m4m.math.vector3): boolean;
    addPlaneFrame(planetran: m4m.framework.transform, size: any, sh: any, linemesh: any): void;
    private cupTpi;
    isPickAxis(ray: m4m.framework.ray): boolean;
    private isPickTrans;
    private lastPos;
    private lastCamPos;
    private lastRotate;
    private lastCamRotate;
    adjustPlanes(): void;
    colorRefresh(onlyReset?: boolean): void;
    private colorChange;
    private childrenColorCg;
    private getViewZ;
    private isholdDown;
    private mousePosInScreen;
    private contrastDir;
    private lastDebugModel;
    private lastTargetID;
    private offset;
    private lastMidPickPos;
    private isMidPicked;
    pointDownEvent(e: any): number;
    private getusefulPickinfo;
    private moveOverlimit;
    private readonly limitNum;
    private mouseStartPoint;
    private mouseEndPoint;
    private eCameraStartPoint;
    private MouseStartPoint;
    private targetStartPoint;
    private targetStartScale;
    private targetStartRotate;
    pointHoldEvent(e: any): void;
    pointUpEvent(e: any): void;
    private tarlastPos;
    private tarlastRotate;
    private tarlastScale;
    private isPickedAxis;
    private saveRTS;
    DebugModelChange(_model: number): void;
    setToolGlobal(isGlobal: boolean): void;
}
